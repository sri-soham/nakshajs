const fs = require('fs');
const path = require('path');
const yauzl = require('yauzl');
const errors = require('../helpers/errors.js');

// https://www.loc.gov/preservation/digital/formats/fdd/fdd000280.shtml
// Extensions starting from '.shp' to '.cpg' are listed at above url
// .qpj is used/generated by qgis.
const allowed_extensions = ['.csv', '.kml', '.json', '.geojson', '.shp', '.shx', '.dbf',
    '.sbn', '.sbx', '.atx', '.fbn', '.fbx', '.ain', '.aih', '.ixs', '.mxs', '.prj',
    '.xml', '.cpg', '.qpj'];

class ZipFile {
    constructor() {
        this.process = this.process.bind(this);
        this.onEntry = this.onEntry.bind(this);
        this.onClose = this.onClose.bind(this);
    }

    process(full_path) {
        this._directory_name = path.dirname(full_path);
        let that = this;
        return new Promise(function(resolve, reject) {
            yauzl.open(full_path, {lazyEntries: true}, function(err, zipfile) {
                if (err) throw reject(err);
                zipfile.readEntry();
                zipfile.on('entry', function(entry) {
                    that.onEntry(zipfile, entry, resolve, reject);
                });
                zipfile.on('close', function() {
                    that.onClose(resolve, reject);
                });
            });
            
        });
    }

    onEntry(zipfile, entry, resolve, reject) {
        let that = this;
        if (/\/$/.test(entry.fileName)) {
            reject(new errors.NakshaError('Directories not allowed'));
        }
        if (allowed_extensions.indexOf(path.extname(entry.fileName)) >= 0) {
            zipfile.openReadStream(entry, function(err, readstream) {
                if (err) throw reject(err);
                readstream.on('end', function() {
                    zipfile.readEntry();
                });
                var ws = fs.createWriteStream(path.join(that._directory_name, entry.fileName));
                readstream.pipe(ws);
            });
        }
        else {
            reject(new errors.NakshaError('Only ' + allowed_extensions.join(', ')  + ' formats are allowed'));
        }
    }

    onClose(resolve, reject) {
        let filename;

        fs.readdir(this._directory_name, function(err, files) {
            if (err) throw reject(err);

            if (files.length > 6) {
                reject(new errors.NakshaError('Invalid zip file'));
            }
            if (files.length === 2) {
                // zip file and the unzipped file
                files.forEach(function(file, index) {
                    if (path.extname(file).toLowerCase() !== '.zip') {
                        filename = file;
                    }
                });
            }
            else {
                let count = 0;
                files.forEach(function(file, index) {
                    switch (path.extname(file).toLowerCase()) {
                        case '.shp':
                            count++;
                            filename = file;
                        break;
                        case '.shx':
                        case '.dbf':
                        case '.prj':
                            count++;
                        break;
                    }
                });
                if (count !== 4) {
                    reject(new errors.NakshaError('One of shp, shx, dbf, prj files is missing'));
                }
            }

            resolve(filename);
        });
    }
}

module.exports = ZipFile;
